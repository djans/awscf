AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ApplicationName:
    Type: String
    Default: Cogitosum
    Description : Prefix added to the name of some Resources
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: "172.20.0.0/16"
  PublicSubnetaCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: "172.20.11.0/24"
  PublicSubnetbCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: "172.20.31.0/24"
  PrivateSubnetaCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: "172.20.51.0/24"
  PrivateSubnetbCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: "172.20.71.0/24"
  ImageId:
    Type: 'AWS::EC2::Image::Id'
    Default: 'ami-08c4233ca49dd1dd4'
    Description: The Amazon EC2 Linux instance Amazon Machine Image (AMI), which designates the configuration of the new instance.
  InstanceType:
    Type: String
    Default: t2.micro
    Description: The type of Amazon EC2 Linux instances that will be launched for this project.
  AutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Enter the Min Size for the ASG
  AutoScalingGroupMaxSize:
    Type: Number
    Default: 2
    Description: Enter the Max Size for the ASG
  AutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 1
    Description: Enter the Max Size for the ASG
  ThumbprintList:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1
    Description: A thumbprint of an Open ID Connector is a SHA1 hash of the public certificate of the host
  GithubRepoName:
    Type: String
    Description: GitHub repository name Ex-TestUser/TestCodeDeploy
Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-VPC'

############ SUBNETS ################
  MySubneta:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetaCIDR
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-Public-Subnet-a'
  MySubnetb:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetbCIDR
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-Public-Subnet-b'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetaCIDR
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: "Name"
          Value: !Sub '${ApplicationName}-Private-Subnet-a'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetbCIDR
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: "Name"
          Value: !Sub '${ApplicationName}-Private-Subnet-b'

  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'My security group for EC2 instances'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-SG'
  NewInternetGatewayId:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-IGW'

  AttachExistingInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref NewInternetGatewayId

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-PublicRoute'

  DefaultRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref NewInternetGatewayId

  Subnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MySubneta
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MySubnetb
      RouteTableId: !Ref PublicRouteTable

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${ApplicationName}-TargetGroup'
      Protocol: 'HTTPS'
      Port: 443
      VpcId: !Ref MyVPC
      HealthCheckProtocol: 'HTTPS'
      HealthCheckPort: '443'
      HealthCheckPath: '/'
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: '200'
      TargetType: 'instance'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-TargetGroup'

  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${ApplicationName}-LoadBalancer'
      Subnets:
        - Ref: MySubneta
        - Ref: MySubnetb
      #      SecurityGroups:
      #        - sg-05f8d99ce8aff01bf
      LoadBalancerAttributes:
        - Key: 'idle_timeout.timeout_seconds'
          Value: '60'
      Scheme: 'internet-facing'
      Type: application
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-LoadBalancer'

  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: 'fixed-response'
          FixedResponseConfig:
            StatusCode: '200'
            MessageBody: 'OK'
            ContentType: 'text/plain'
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: 'HTTP'

  MyListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref MyTargetGroup
      Conditions:
        - Field: 'path-pattern'
          Values:
            - '/*'
      ListenerArn: !Ref MyListener
      Priority: 1
############ ROLES ################
  WebappRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub '${ApplicationName}-WebappRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
        -
          PolicyName: "allow-webapp-deployment-bucket-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:getObject"
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*
#  IDCProvider:
#    Type: AWS::IAM::OIDCProvider
#    Properties:
#      Url: "https://token.actions.githubusercontent.com"
#      ClientIdList:
#        - "sts.amazonaws.com"
#      ThumbprintList:
#        - !Ref ThumbprintList
  GitHubIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub '${ApplicationName}-CodeDeployRoleforGitHub'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
#              Federated: !Ref IDCProvider
              Federated: "token.actions.githubusercontent.com"
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GithubRepoName}:*
      MaxSessionDuration: 3600
      Description: "Github Actions role"
      Policies:

        - PolicyName: 'CodeDeployRoleforGitHub-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:Get*'
                  - 'codedeploy:Batch*'
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'codedeploy:List*'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 's3:putObject'
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-CodeDeployRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Policies:
        -
          PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:CreateTags
                  - iam:PassRole
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
  WebappApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${ApplicationName}-Webapp'
  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref WebappApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName: !Sub '${ApplicationName}-GroupName'
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_REQUEST

      AutoScalingGroups:
        - Ref: AutoScalingGroup
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to ALB from internet
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to Webapp from ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          SourceSecurityGroupId:
            Ref: ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  WebappDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  WebappInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: WebappRole
  WebappLaunchConfig:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Ref: ImageId
        InstanceType:
          Ref: InstanceType
          # KeyName: defaultPublicKP
        # SecurityGroupIds:
        #  - Ref: WebappSecurityGroup
        KeyName: defaultPublicKP                  # Key pair for SSH access
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0                   # Primary network interface
            # SubnetId: !Ref PublicSubnet1
            Groups:
              - Ref: WebappSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: MyInstance
        UserData:
          "Fn::Base64":
            !Sub |
            #!/bin/bash
            yum install ruby -y
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            cd /tmp
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      DesiredCapacity: !Ref AutoScalingGroupDesiredCapacity
      MinSize: !Ref AutoScalingGroupMinSize
      MaxSize: !Ref AutoScalingGroupMaxSize
      LaunchTemplate:
        LaunchTemplateId: !Ref WebappLaunchConfig  # Reference the Launch Template
        Version: "1"
      VPCZoneIdentifier:
        - Ref: MySubneta
        - Ref: MySubnetb
      TargetGroupARNs:
        - Ref: ALBTargetGroup
      Tags:
        - Key: Name
          Value: Cogitosum-ASG
          PropagateAtLaunch: true
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: NewInternetGatewayId
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: MySubneta
        - Ref: MySubnetb
      SecurityGroups:
        - Ref: ALBSecurityGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckPath: "/"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref MyVPC

Outputs:
  LoadBalancerDNSName:
    Description: 'DNS name of the load balancer'
    Value: !GetAtt MyLoadBalancer.DNSName

  TargetGroupArn:
    Description: 'ARN of the target group'
    Value: !Ref MyTargetGroup

  SecurityGroupId:
    Description: 'The Security Group ID'
    Value: !Ref MySecurityGroup